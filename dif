diff --git a/backend/app/app.go b/backend/app/app.go
index 6733fd0..659e195 100644
--- a/backend/app/app.go
+++ b/backend/app/app.go
@@ -32,7 +32,8 @@ func New() *App {
 	return &App{}
 }
 func (a *App) UseDb(conn *sql.DB) {
-	a.Db.Conn = conn
+	d := &db{Conn: conn}
+	a.Db = d
 }
 
 func (app *App) handle(pattern string, handlers []HandlerFunc, methods ...string) {
diff --git a/backend/app/appTest.go b/backend/app/appTest.go
new file mode 100644
index 0000000..de127d0
--- /dev/null
+++ b/backend/app/appTest.go
@@ -0,0 +1,22 @@
+package octopus
+
+import (
+	"database/sql"
+)
+
+var AppTest = New()
+
+var Db = func() *sql.DB {
+	conn, err := sql.Open("sqlite3", "../db/sqlite/app_database.sqlite")
+	if err != nil {
+		panic(err)
+	}
+	return conn
+}()
+
+var _ = func() error {
+	// AppTest.Run(":8888")
+	AppTest.UseDb(Db)
+
+	return nil
+}()
diff --git a/backend/pkg/db/sqlite/app_database.sqlite b/backend/pkg/db/sqlite/app_database.sqlite
new file mode 100644
index 0000000..0743f76
Binary files /dev/null and b/backend/pkg/db/sqlite/app_database.sqlite differ
diff --git a/backend/pkg/db/sqlite/init.db b/backend/pkg/db/sqlite/init.db
index f8fd6e3..70eeb56 100644
--- a/backend/pkg/db/sqlite/init.db
+++ b/backend/pkg/db/sqlite/init.db
@@ -1,6 +1,6 @@
 -- Users Table
 CREATE TABLE Users (
-    id INTEGER PRIMARY KEY,
+    id TEXT PRIMARY KEY UNIQUE,
     email TEXT UNIQUE,
     password TEXT,
     first_name TEXT,
@@ -17,9 +17,9 @@ CREATE TABLE Users (
 
 -- Followers Table
 CREATE TABLE Followers (
-    id INTEGER PRIMARY KEY,
-    follower_id INTEGER REFERENCES Users(id),
-    followee_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    follower_id TEXT REFERENCES Users(id),
+    followee_id TEXT REFERENCES Users(id),
     status TEXT CHECK(status IN ('requested', 'accepted', 'declined')),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
@@ -27,8 +27,8 @@ CREATE TABLE Followers (
 
 -- Posts Table
 CREATE TABLE Posts (
-    id INTEGER PRIMARY KEY,
-    user_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    user_id TEXT REFERENCES Users(id),
     title TEXT,
     content TEXT,
     image_url TEXT,
@@ -40,20 +40,20 @@ CREATE TABLE Posts (
 
 -- Groups Table
 CREATE TABLE Groups (
-    id INTEGER PRIMARY KEY,
+    id TEXT PRIMARY KEY,
     title TEXT,
     description TEXT,
     banner_url TEXT,
-    creator_id INTEGER REFERENCES Users(id),
+    creator_id TEXT REFERENCES Users(id),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );
 
 -- Group Members Table
 CREATE TABLE GroupMembers (
-    id INTEGER PRIMARY KEY,
-    group_id INTEGER REFERENCES Groups(id),
-    member_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    group_id TEXT REFERENCES Groups(id),
+    member_id TEXT REFERENCES Users(id),
     status TEXT CHECK(status IN ('invited', 'requesting', 'accepted', 'declined')),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
@@ -61,17 +61,17 @@ CREATE TABLE GroupMembers (
 
 -- Group Posts Table
 CREATE TABLE GroupPosts (
-    id INTEGER PRIMARY KEY,
-    group_id INTEGER REFERENCES Groups(id),
-    post_id INTEGER REFERENCES Posts(id),
+    id TEXT PRIMARY KEY,
+    group_id TEXT REFERENCES Groups(id),
+    post_id TEXT REFERENCES Posts(id),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );
 
 -- Events Table
 CREATE TABLE Events (
-    id INTEGER PRIMARY KEY,
-    group_id INTEGER REFERENCES Groups(id),
+    id TEXT PRIMARY KEY,
+    group_id TEXT REFERENCES Groups(id),
     title TEXT,
     description TEXT,
     datetime DATETIME,
@@ -81,9 +81,9 @@ CREATE TABLE Events (
 
 -- Events Participant Table
 CREATE TABLE EventsParticipants (
-    id INTEGER PRIMARY KEY,
-    event_id INTEGER REFERENCES Events(id),
-    member_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    event_id TEXT REFERENCES Events(id),
+    member_id TEXT REFERENCES Users(id),
     response TEXT CHECK(response IN ('going', 'not_going')),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
@@ -91,26 +91,26 @@ CREATE TABLE EventsParticipants (
 
 -- Private Messages Table
 CREATE TABLE PrivateMessages (
-    id INTEGER PRIMARY KEY,
-    sender_id INTEGER REFERENCES Users(id),
-    receiver_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    sender_id TEXT REFERENCES Users(id),
+    receiver_id TEXT REFERENCES Users(id),
     content TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );
 
 -- Group Messages Table
 CREATE TABLE GroupMessages (
-    id INTEGER PRIMARY KEY,
-    group_id INTEGER REFERENCES Groups(id),
-    sender_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    group_id TEXT REFERENCES Groups(id),
+    sender_id TEXT REFERENCES Users(id),
     content TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );
 
 -- Notifications Table
 CREATE TABLE Notifications (
-    id INTEGER PRIMARY KEY,
-    user_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    user_id TEXT REFERENCES Users(id),
     type TEXT CHECK(type IN ('follow_request', 'group_invitation', 'new_message', 'new_event')),
     message TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
@@ -118,8 +118,8 @@ CREATE TABLE Notifications (
 
 -- Sessions Table
 CREATE TABLE Sessions (
-    id INTEGER PRIMARY KEY,
-    user_id INTEGER REFERENCES Users(id),
+    id TEXT PRIMARY KEY,
+    user_id TEXT  REFERENCES Users(id),
     session_token TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     expires_at TIMESTAMP,
diff --git a/backend/pkg/db/sqlite/sqlite.go b/backend/pkg/db/sqlite/sqlite.go
index fc727e2..380a1be 100644
--- a/backend/pkg/db/sqlite/sqlite.go
+++ b/backend/pkg/db/sqlite/sqlite.go
@@ -1 +1,2 @@
-package sqlite
\ No newline at end of file
+package sqlite
+	
\ No newline at end of file
diff --git a/backend/pkg/models/user.go b/backend/pkg/models/user.go
index ea590f4..7316fb9 100644
--- a/backend/pkg/models/user.go
+++ b/backend/pkg/models/user.go
@@ -39,12 +39,13 @@ func (user *User) Create(db *sql.DB) error {
 
 	stmt, err := db.Prepare(query)
 	if err != nil {
+		
 		return fmt.Errorf("unable to prepare the query. %v", err)
 	}
 	defer stmt.Close()
 
 	_, err = stmt.Exec(
-		user.ID,
+		user.ID.String(),
 		html.EscapeString(user.Email),
 		html.EscapeString(user.Password),
 		html.EscapeString(user.FirstName),
@@ -57,8 +58,9 @@ func (user *User) Create(db *sql.DB) error {
 		user.CreatedAt,
 		user.UpdatedAt,
 	)
-
+	fmt.Println()
 	if err != nil {
+		fmt.Println("here")
 		return fmt.Errorf("unable to execute the query. %v", err)
 	}
 
@@ -67,9 +69,9 @@ func (user *User) Create(db *sql.DB) error {
 
 // Get a user by its ID
 func (user *User) Get(db *sql.DB, id uuid.UUID) error {
-	query := `SELECT id, email, password, first_name, last_name, date_of_birth, avatar_image, nickname, about_me, is_public, created_at, updated_at FROM users WHERE id = $1 AND deleted_at IS NULL`
+	query := `SELECT id, email, password, first_name, last_name, date_of_birth, avatar_image, nickname, about_me, is_public, created_at, updated_at FROM users WHERE id = $1 AND delete_at IS NULL`
 
-	row := db.QueryRow(query, id)
+	row := db.QueryRow(query, id.String())
 
 	err := row.Scan(
 		&user.ID,
diff --git a/backend/pkg/unit_tests/user_test.go b/backend/pkg/unit_tests/user_test.go
new file mode 100644
index 0000000..5561750
--- /dev/null
+++ b/backend/pkg/unit_tests/user_test.go
@@ -0,0 +1,51 @@
+package unittests
+
+import (
+	octopus "backend/app"
+	"backend/pkg/models"
+	"fmt"
+	"testing"
+	// _ "github.com/mattn/go-sqlite3"
+)
+
+func TestUserOBject(t *testing.T) {
+
+	user := models.User{
+		Email: "ldsfdo@outlook.com",
+		FirstName: "lolo",
+		LastName: "juju",
+		AboutMe: "blablablablablablablablablablablablablablablablablabl",
+	
+	}
+	if err := user.Create(octopus.AppTest.Db.Conn); err != nil {
+		t.Errorf(err.Error())
+		t.FailNow()
+	}
+	userCLone := models.User{}
+
+	if err := userCLone.Get(octopus.AppTest.Db.Conn,user.ID); err != nil {
+		t.Errorf(err.Error())
+		t.FailNow()
+	}
+	results := []bool{
+		user.Email==userCLone.Email,
+		user.FirstName==userCLone.FirstName,
+		user.AboutMe ==userCLone.AboutMe,
+	}
+	for _,result := range results {
+		if !result{
+			t.Errorf("user created is different from user cloned by the methode Ged ")
+		} 
+	}
+	
+	fmt.Println("succesâœ…:  user created is the same as user cloned")
+
+}
+
+func TestAll(t *testing.T) {
+	userTEst := t.Run("userObjectTEst",TestUserOBject)
+	fmt.Println(userTEst)
+
+}
+
+
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index 7db75d9..de7b376 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -3691,6 +3691,7 @@
     },
     "node_modules/@parcel/watcher-wasm/node_modules/napi-wasm": {
       "version": "1.1.0",
+      "dev": true,
       "inBundle": true,
       "license": "MIT"
     },
